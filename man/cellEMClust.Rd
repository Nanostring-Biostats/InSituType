% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cellEMClust.R
\name{cellEMClust}
\alias{cellEMClust}
\title{Clustering wrapper function}
\usage{
cellEMClust(
  counts,
  neg,
  bg = NULL,
  init_clust = NULL,
  n_clusts = NULL,
  fixed_profiles = NULL,
  align_genes = TRUE,
  nb_size = 10,
  n_iters = 20,
  method = "CEM",
  shrinkage = 0.8,
  subset_size = 1000,
  n_starts = 10,
  n_benchmark_cells = 500,
  n_final_iters = 3
)
}
\arguments{
\item{counts}{Counts matrix, cells * genes.}

\item{neg}{Vector of mean negprobe counts per cell}

\item{bg}{Expected background}

\item{init_clust}{Vector of initial cluster assignments.
If NULL, initial assignments will be automatically inferred.}

\item{n_clusts}{Number of clusters, in addition to any pre-specified cell types.}

\item{fixed_profiles}{Matrix of expression profiles of pre-defined clusters,
e.g. from previous scRNA-seq. These profiles will not be updated by the EM algorithm.
Colnames must all be included in the init_clust variable.}

\item{align_genes}{Logical, for whether to align the counts matrix and the fixed_profiles by gene ID.}

\item{nb_size}{The size parameter to assume for the NB distribution.}

\item{n_iters}{Numer of iterations}

\item{method}{Whether to run a SEM algorithm (points given a probability
of being in each cluster) or a classic EM algorithm (all points wholly
assigned to one cluster).}

\item{shrinkage}{Fraction by which to shrink the average profiles towards
the fixed profiles. 1 = keep the fixed profile; 0 = don't shrink the mean profile.}

\item{subset_size}{To speed computations, each iteration will use a subset of only this many cells.
 (The final iteration runs on all cells.) Set to NULL to use all cells in every iter.
 (This option has not yet been enabled.)

 @importFrom stats lm}
}
\value{
A list, with the following elements:
\enumerate{
\item cluster: a vector given cells' cluster assignments
\item probs: a matrix of probabilies of all cells (rows) belonging to all clusters (columns)
\item profiles: a matrix of cluster-specific expression profiles
\item n_changed: how many cells changed class at each step
\item logliks: a matrix of each cell's log-likelihood under each cluster
}
}
\description{
A wrapper for nbclust, to manage subsampling and multiple random starts
}
\examples{
# load data ("raw" and "cellannot"):
data(ioprofiles)
# predict per-cell bbackground:
bgmodel = lm(rowSums(raw[, grepl("NegPrb", colnames(raw))]) ~ rowSums(raw) - 1)$coef
bg.predicted = rowSums(raw) * bgmodel
# run unsupervised clustering with several random starts:
unsup <- cellEMClust(counts = raw,
                     bg = bg.predicted,
                     init_clust = NULL, n_clusts = 12,
                     fixed_profiles = NULL,
                     nb_size = 10,
                     n_iters = 10,  # this is not enough
                     method = "EM", shrinkage = 0.5,
                     subset_size = 1000,  # smaller than ideal
                     n_starts = 4,
                     n_benchmark_cells = 500,
                     n_final_iters = 5)   # this is not enough
# plot clusters:
scols = c(cellcols, brewer.pal(12, "Set3")[-2], brewer.pal(8, "Set2"))[1:length(unique(unsup$clust))]
names(scols) = unique(unsup$clust)
plot(cellannot$x, cellannot$y, pch = 16, col = scols[unsup$clust])

# view immune oncology cell profiles (in ptolemy package data):
head(ioprofiles)
usegenes = intersect(rownames(ioprofiles), colnames(raw))
semi <- cellEMClust(counts = raw[, usegenes],
                    bg = bg.predicted,
                    init_clust = NULL, n_clusts = 6,
                    fixed_profiles = ioprofiles[usegenes, ],
                    nb_size = 10,
                    n_iters = 10,  # this is not enough
                    method = "EM",
                    shrinkage = 0.5,
                    subset_size = 1000,
                    n_starts = 4,
                    n_benchmark_cells = 500,
                    n_final_iters = 5)  # this is not enough
# plot clusters:
scols = c(cellcols, brewer.pal(12, "Set3")[-2], brewer.pal(8, "Set2"))[1:length(unique(semi$clust))]
names(scols) = unique(semi$clust)
plot(cellannot$x, cellannot$y, pch = 16, col = scols[semi$clust])
# draw flightpath plot for summarizing cell typing results:
fp = flightpath_layout(probs = semi$probs, cluster_xpos = NULL, cluster_ypos = NULL)
plot(fp$cellpos, pch = 16, col = alpha(scols[semi$clust], 0.5))
text(fp$clustpos[, 1], fp$clustpos[, 2], rownames(fp$clustpos), cex = 1.5)
}
